// <copyright file="PirateClientTest.NamesFromString.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace PirateSpades.Network
{
    public partial class PirateClientTest {
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString495()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("player_name: \u00b5\u0100\u0100\u0100\0");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString295()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString
                  ("player_name: \u00b5\u0100\u0100\u0100\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString878()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("player_name: \u00b5\u0100\u0100\u0100");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(1, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString78()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString
                  ("player_name: \u00b5\u0100\u0100\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString239()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("player_name: \u00b5\u0100\u0100");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(1, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString172()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("player_name: \0\0\0");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString901()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("player_name: ");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString708()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString(new string('\0', 13));
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
public void NamesFromString72()
{
    HashSet<string> hashSet;
    hashSet = this.NamesFromString("");
    Assert.IsNotNull((object)hashSet);
    Assert.AreEqual<int>(0, hashSet.Count);
    Assert.IsNotNull(hashSet.Comparer);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void NamesFromStringThrowsContractException992()
{
    try
    {
      HashSet<string> hashSet;
      hashSet = this.NamesFromString((string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
