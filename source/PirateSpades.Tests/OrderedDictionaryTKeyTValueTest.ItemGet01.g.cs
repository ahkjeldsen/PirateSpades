// <copyright file="OrderedDictionaryTKeyTValueTest.ItemGet01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using System.Collections.Specialized;

namespace PirateSpades.Misc
{
    public partial class OrderedDictionaryTKeyTValueTest {
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGet01ThrowsContractException731()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      int i;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      i = this.ItemGet01<int, int>(orderedDictionary, 3);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGet01ThrowsContractException229()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      int i;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi, 1434648609);
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      i = this.ItemGet01<int, int>(orderedDictionary, 278423077);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGet01ThrowsContractException388()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      int i;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi, 679378944);
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      i = this.ItemGet01<int, int>(orderedDictionary, -1468104704);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
public void ItemGet01235()
{
    OrderedDictionary<int, int> orderedDictionary;
    int i;
    object boxi = (object)(default(int));
    object boxi1 = (object)(default(int));
    orderedDictionary = new OrderedDictionary<int, int>();
    orderedDictionary[boxi] = boxi1;
    i = this.ItemGet01<int, int>(orderedDictionary, 0);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)orderedDictionary);
    Assert.AreEqual<bool>(false, ((OrderedDictionary)orderedDictionary).IsReadOnly);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGetThrowsContractException63()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      object o;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi, -2147465216);
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      object boxi2 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi2, 18432);
      o = this.ItemGet<int, int>(orderedDictionary, boxi2);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGetThrowsContractException561()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      object o;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi, 32);
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      object boxi2 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi2, 77072511);
      o = this.ItemGet<int, int>(orderedDictionary, boxi2);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGetThrowsContractException217()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      object o;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      object boxi2 = (object)(default(int));
      PexSafeHelpers.AssignBoxedValue<int>(boxi2, 3);
      o = this.ItemGet<int, int>(orderedDictionary, boxi2);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
public void ItemGet235()
{
    OrderedDictionary<int, int> orderedDictionary;
    object o;
    object boxi = (object)(default(int));
    object boxi1 = (object)(default(int));
    orderedDictionary = new OrderedDictionary<int, int>();
    orderedDictionary[boxi] = boxi1;
    object boxi2 = (object)(default(int));
    o = this.ItemGet<int, int>(orderedDictionary, boxi2);
    Assert.IsNotNull((object)orderedDictionary);
    Assert.AreEqual<bool>(false, ((OrderedDictionary)orderedDictionary).IsReadOnly);
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGetThrowsContractException440()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      object o;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      object s0 = new object();
      o = this.ItemGet<int, int>(orderedDictionary, s0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(OrderedDictionaryTKeyTValueTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ItemGetThrowsContractException990()
{
    try
    {
      OrderedDictionary<int, int> orderedDictionary;
      object o;
      object boxi = (object)(default(int));
      object boxi1 = (object)(default(int));
      orderedDictionary = new OrderedDictionary<int, int>();
      orderedDictionary[boxi] = boxi1;
      o = this.ItemGet<int, int>(orderedDictionary, (object)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
