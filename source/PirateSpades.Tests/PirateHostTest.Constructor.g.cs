// <copyright file="PirateHostTest.Constructor.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net.Sockets;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace PirateSpades.Network
{
    public partial class PirateHostTest {
[TestMethod]
[PexGeneratedBy(typeof(PirateHostTest))]
public void Constructor716()
{
    PirateHost pirateHost;
    pirateHost = this.Constructor(1);
    Assert.IsNotNull((object)pirateHost);
    Assert.IsNotNull(pirateHost.Ip);
    Assert.AreEqual<AddressFamily>
        (AddressFamily.InterNetwork, pirateHost.Ip.AddressFamily);
    Assert.AreEqual<bool>(false, pirateHost.Ip.IsIPv6Multicast);
    Assert.AreEqual<bool>(false, pirateHost.Ip.IsIPv6LinkLocal);
    Assert.AreEqual<bool>(false, pirateHost.Ip.IsIPv6SiteLocal);
    Assert.AreEqual<bool>(false, pirateHost.Ip.IsIPv6Teredo);
    Assert.AreEqual<int>(1, pirateHost.Port);
    Assert.AreEqual<bool>(false, pirateHost.Started);
    Assert.AreEqual<bool>(false, pirateHost.AcceptNewConnections);
    Assert.AreEqual<bool>(false, pirateHost.DebugMode);
    Assert.IsNull(pirateHost.Game);
    Assert.AreEqual<string>((string)null, pirateHost.GameName);
    Assert.AreEqual<int>(0, pirateHost.MaxPlayers);
    Assert.IsNotNull(pirateHost.Broadcaster);
    Assert.IsNotNull(pirateHost.Broadcaster.Message);
    Assert.AreEqual<int>(0, pirateHost.Broadcaster.Message.Length);
    Assert.AreEqual<int>(1, pirateHost.Broadcaster.Port);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateHostTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException357()
{
    try
    {
      PirateHost pirateHost;
      pirateHost = this.Constructor(0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
