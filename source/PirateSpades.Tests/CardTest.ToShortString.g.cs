// <copyright file="CardTest.ToShortString.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Explorable;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace PirateSpades.GameLogicV2
{
    using PirateSpades.GameLogic;

    public partial class CardTest {
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString732()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Jack);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u2666J", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Jack, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString549()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Ace);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u2666A", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Ace, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString702()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Ten);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u2666T", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Ten, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString896()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Queen);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u2666Q", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Queen, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString805()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Two);
    PexInvariant.SetField<Suit>((object)card, "<Suit>k__BackingField", Suit.Hearts);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u26652", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Two, card.Value);
    Assert.AreEqual<Suit>(Suit.Hearts, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString102()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Two);
    PexInvariant.SetField<Suit>((object)card, "<Suit>k__BackingField", Suit.Clubs);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u26632", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Two, card.Value);
    Assert.AreEqual<Suit>(Suit.Clubs, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString90()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Two);
    PexInvariant.SetField<Suit>((object)card, "<Suit>k__BackingField", Suit.Spades);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u26602", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Two, card.Value);
    Assert.AreEqual<Suit>(Suit.Spades, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString653()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.King);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u2666K", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.King, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
[TestMethod]
[PexGeneratedBy(typeof(CardTest))]
public void ToShortString292()
{
    Card card;
    string s;
    card = PexInvariant.CreateInstance<Card>();
    PexInvariant.SetField<CardValue>
        ((object)card, "<Value>k__BackingField", CardValue.Two);
    PexInvariant.SetField<Suit>
        ((object)card, "<Suit>k__BackingField", Suit.Diamonds);
    PexInvariant.CheckInvariant((object)card);
    s = this.ToShortString(card);
    Assert.AreEqual<string>("\u26662", s);
    Assert.IsNotNull((object)card);
    Assert.AreEqual<CardValue>(CardValue.Two, card.Value);
    Assert.AreEqual<Suit>(Suit.Diamonds, card.Suit);
}
    }
}
