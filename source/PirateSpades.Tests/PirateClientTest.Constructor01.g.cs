// <copyright file="PirateClientTest.Constructor01.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using System.Net.Sockets;

namespace PirateSpades.Network
{
    public partial class PirateClientTest {
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException727()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      bs[0] = (byte)1;
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 1L;
      pirateClient = this.Constructor01("", iPAddress, 1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException308()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 1L;
      pirateClient = this.Constructor01("", iPAddress, 1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException741()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 0L;
      pirateClient = this.Constructor01("", iPAddress, 65537);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException400()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      bs[0] = (byte)1;
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 0L;
      pirateClient = this.Constructor01("", iPAddress, 1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException562()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 0L;
      pirateClient = this.Constructor01("", iPAddress, 1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException696()
{
    try
    {
      IPAddress iPAddress;
      PirateClient pirateClient;
      byte[] bs = new byte[16];
      iPAddress = new IPAddress(bs);
      iPAddress.ScopeId = 0L;
      pirateClient = this.Constructor01("", iPAddress, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException280()
{
    try
    {
      PirateClient pirateClient;
      pirateClient = this.Constructor01("", (IPAddress)null, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void Constructor01ThrowsContractException745()
{
    try
    {
      PirateClient pirateClient;
      pirateClient = this.Constructor01((string)null, (IPAddress)null, 0);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateClientTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException946()
{
    try
    {
      PirateClient pirateClient;
      pirateClient = this.Constructor((Socket)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
