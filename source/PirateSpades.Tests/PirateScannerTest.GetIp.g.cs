// <copyright file="PirateScannerTest.GetIp.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Net;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net.Sockets;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;

namespace PirateSpades.Network
{
    public partial class PirateScannerTest {
[TestMethod]
[PexGeneratedBy(typeof(PirateScannerTest))]
public void GetIp364()
{
    IPAddress iPAddress;
    iPAddress = this.GetIp("4.1.0.250");
    Assert.IsNotNull((object)iPAddress);
    Assert.AreEqual<AddressFamily>
        (AddressFamily.InterNetwork, iPAddress.AddressFamily);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Multicast);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6LinkLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6SiteLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Teredo);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateScannerTest))]
public void GetIp129()
{
    IPAddress iPAddress;
    iPAddress = this.GetIp("1.0.0.80");
    Assert.IsNotNull((object)iPAddress);
    Assert.AreEqual<AddressFamily>
        (AddressFamily.InterNetwork, iPAddress.AddressFamily);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Multicast);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6LinkLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6SiteLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Teredo);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateScannerTest))]
public void GetIp100()
{
    IPAddress iPAddress;
    iPAddress = this.GetIp("4.0.6.8");
    Assert.IsNotNull((object)iPAddress);
    Assert.AreEqual<AddressFamily>
        (AddressFamily.InterNetwork, iPAddress.AddressFamily);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Multicast);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6LinkLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6SiteLocal);
    Assert.AreEqual<bool>(false, iPAddress.IsIPv6Teredo);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateScannerTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void GetIpThrowsContractException181()
{
    try
    {
      IPAddress iPAddress;
      iPAddress = this.GetIp("");
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PirateScannerTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void GetIpThrowsContractException792()
{
    try
    {
      IPAddress iPAddress;
      iPAddress = this.GetIp((string)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
    }
}
