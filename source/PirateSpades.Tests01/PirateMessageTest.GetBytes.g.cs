// <copyright file="PirateMessageTest.GetBytes.g.cs">Copyright ©  2011</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace PirateSpades.Network
{
    public partial class PirateMessageTest {
[TestMethod]
[PexGeneratedBy(typeof(PirateMessageTest))]
public void GetBytes988()
{
    PirateMessage pirateMessage;
    byte[] bs;
    pirateMessage = new PirateMessage(PirateMessageHead.Fail, "\ud880\ud880");
    bs = this.GetBytes(pirateMessage);
    Assert.IsNotNull((object)bs);
    Assert.AreEqual<int>(14, bs.Length);
    Assert.AreEqual<byte>((byte)48, bs[0]);
    Assert.AreEqual<byte>((byte)48, bs[1]);
    Assert.AreEqual<byte>((byte)49, bs[2]);
    Assert.AreEqual<byte>((byte)48, bs[3]);
    Assert.AreEqual<byte>((byte)70, bs[4]);
    Assert.AreEqual<byte>((byte)65, bs[5]);
    Assert.AreEqual<byte>((byte)73, bs[6]);
    Assert.AreEqual<byte>((byte)76, bs[7]);
    Assert.AreEqual<byte>((byte)239, bs[8]);
    Assert.AreEqual<byte>((byte)191, bs[9]);
    Assert.AreEqual<byte>((byte)189, bs[10]);
    Assert.AreEqual<byte>((byte)239, bs[11]);
    Assert.AreEqual<byte>((byte)191, bs[12]);
    Assert.AreEqual<byte>((byte)189, bs[13]);
    Assert.IsNotNull((object)pirateMessage);
    Assert.AreEqual<PirateMessageHead>(PirateMessageHead.Fail, pirateMessage.Head);
    Assert.AreEqual<string>("\ud880\ud880", pirateMessage.Body);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateMessageTest))]
public void GetBytes366()
{
    PirateMessage pirateMessage;
    byte[] bs;
    pirateMessage =
      new PirateMessage(PirateMessageHead.Fail, "\0\0\0\0\0\0\udc00\0\0\0\0");
    bs = this.GetBytes(pirateMessage);
    Assert.IsNotNull((object)bs);
    Assert.AreEqual<int>(21, bs.Length);
    Assert.AreEqual<byte>((byte)48, bs[0]);
    Assert.AreEqual<byte>((byte)48, bs[1]);
    Assert.AreEqual<byte>((byte)49, bs[2]);
    Assert.AreEqual<byte>((byte)55, bs[3]);
    Assert.AreEqual<byte>((byte)70, bs[4]);
    Assert.AreEqual<byte>((byte)65, bs[5]);
    Assert.AreEqual<byte>((byte)73, bs[6]);
    Assert.AreEqual<byte>((byte)76, bs[7]);
    Assert.AreEqual<byte>((byte)0, bs[8]);
    Assert.AreEqual<byte>((byte)0, bs[9]);
    Assert.AreEqual<byte>((byte)0, bs[10]);
    Assert.AreEqual<byte>((byte)0, bs[11]);
    Assert.AreEqual<byte>((byte)0, bs[12]);
    Assert.AreEqual<byte>((byte)0, bs[13]);
    Assert.AreEqual<byte>((byte)239, bs[14]);
    Assert.AreEqual<byte>((byte)191, bs[15]);
    Assert.AreEqual<byte>((byte)189, bs[16]);
    Assert.AreEqual<byte>((byte)0, bs[17]);
    Assert.AreEqual<byte>((byte)0, bs[18]);
    Assert.AreEqual<byte>((byte)0, bs[19]);
    Assert.AreEqual<byte>((byte)0, bs[20]);
    Assert.IsNotNull((object)pirateMessage);
    Assert.AreEqual<PirateMessageHead>(PirateMessageHead.Fail, pirateMessage.Head);
    Assert.AreEqual<string>("\0\0\0\0\0\0\udc00\0\0\0\0", pirateMessage.Body);
}
[TestMethod]
[PexGeneratedBy(typeof(PirateMessageTest))]
public void GetBytes641()
{
    PirateMessage pirateMessage;
    byte[] bs;
    pirateMessage = new PirateMessage(PirateMessageHead.Fail, "");
    bs = this.GetBytes(pirateMessage);
    Assert.IsNotNull((object)bs);
    Assert.AreEqual<int>(8, bs.Length);
    Assert.AreEqual<byte>((byte)48, bs[0]);
    Assert.AreEqual<byte>((byte)48, bs[1]);
    Assert.AreEqual<byte>((byte)48, bs[2]);
    Assert.AreEqual<byte>((byte)52, bs[3]);
    Assert.AreEqual<byte>((byte)70, bs[4]);
    Assert.AreEqual<byte>((byte)65, bs[5]);
    Assert.AreEqual<byte>((byte)73, bs[6]);
    Assert.AreEqual<byte>((byte)76, bs[7]);
    Assert.IsNotNull((object)pirateMessage);
    Assert.AreEqual<PirateMessageHead>(PirateMessageHead.Fail, pirateMessage.Head);
    Assert.AreEqual<string>("", pirateMessage.Body);
}
    }
}
